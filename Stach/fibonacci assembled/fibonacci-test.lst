(ARCTools Version 2.1.2)
 HexLoc     DecLoc    MachWord   Label        Instruction                Comment
                                              .org 0                     
                                                                         
00000000  0000000000  9002210f                add %r8, 271, %r8          ! simulated user data (100001111)
00000004  0000000004  920260ff                add %r9, 255, %r9          ! store 011111111 in %r9
00000008  0000000008  920a0009                and %r8, %r9, %r9          ! extract the wanted C value
0000000c  0000000012  d220207c                st %r9, [124]              ! store the wanted C value in memory
00000010  0000000016  91322008                srl %r8, 8, %r8            ! shift the read IO 8 places to extract the halving bit
00000014  0000000020  d0202080                st %r8, [128]              ! and store the halving value
                                                                         
                                                                         
                                                                         
00000018  0000000024  c8002080                ld [128], %r4              ! loads whether or not we want half of the result
0000001c  0000000028  8400a001                add %r2, 1, %r2            
00000020  0000000032  8c01a001                add %r6, 1, %r6            ! a 1 need for later
00000024  0000000036  8e01e001                add %r7, 1, %r7            ! a 1 need for later
00000028  0000000040  ca00207c  start:        ld [124], %r5              ! keeps track of the iterations
0000002c  0000000044  8a817fff                addcc %r5, -1, %r5         
00000030  0000000048  ca20207c                st %r5, [124]              
00000034  0000000052  0c800009                bneg 9                     
00000038  0000000056  86080003                and %r0, %r3, %r3          ! clear reg3
0000003c  0000000060  86008003                add %r2, %r3, %r3          ! adds %r1 to %r2 and stores in %r3
00000040  0000000064  86004003                add %r1, %r3, %r3          ! ^^^^
00000044  0000000068  82080001                and %r0, %r1, %r1          ! clear reg1
00000048  0000000072  82008001                add %r2, %r1, %r1          ! stores %r2 in %r1
0000004c  0000000076  84080002                and %r0, %r2, %r2          ! clear reg2
00000050  0000000080  8400c002                add %r3, %r2, %r2          ! %r2 will contain the result
00000054  0000000084  10bffff5                ba -11                     
00000058  0000000088  80910000  ending:       orcc %r4, %r0, %r0         ! check if we want the full result
0000005c  0000000092  02800006                be 6                       
00000060  0000000096  8c890006                andcc %r4, %r6, %r6        ! check if we want half of the result
00000064  0000000100  12800001                bne 1                      
00000068  0000000104  8e088007  halving:      and %r2, %r7, %r7          ! check if the last bit is a 1 (then the number is odd)
0000006c  0000000108  8530a001                srl %r2, 1, %r2            ! divide the result by 2 using a shift right
00000070  0000000112  8401c002                add %r7, %r2, %r2          ! and add the 1 back if it was odd
00000074  0000000116  ffffffff  display:      halt                       
00000078  0000000120  ffffffff                halt                       ! display the result
0000007c  0000000124  00000000  C:                                       ! how many times we should run the function
00000080  0000000128  00000000  H:                                       ! H = 0, not halve; H = 1, halve 

--- Symbol Table ---
ending: 88
halving: 104
H: 128
display: 116
C: 124
start: 40
